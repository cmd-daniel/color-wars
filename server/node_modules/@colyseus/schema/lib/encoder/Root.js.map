{"version":3,"file":"Root.js","sourceRoot":"","sources":["../../src/encoder/Root.ts"],"names":[],"mappings":"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","sourcesContent":["import { OPERATION } from \"../encoding/spec\";\nimport { TypeContext } from \"../types/TypeContext\";\nimport { ChangeTree, setOperationAtIndex, ChangeTreeList, createChangeTreeList, ChangeSetName, type ChangeTreeNode } from \"./ChangeTree\";\nimport { $changes } from \"../types/symbols\";\n\nexport class Root {\n    protected nextUniqueId: number = 0;\n\n    refCount: {[id: number]: number} = {};\n    changeTrees: {[refId: number]: ChangeTree} = {};\n\n    // all changes\n    allChanges: ChangeTreeList = createChangeTreeList();\n    allFilteredChanges: ChangeTreeList = createChangeTreeList();// TODO: do not initialize it if filters are not used\n\n    // pending changes to be encoded\n    changes: ChangeTreeList = createChangeTreeList();\n    filteredChanges: ChangeTreeList = createChangeTreeList();// TODO: do not initialize it if filters are not used\n\n    constructor(public types: TypeContext) { }\n\n    getNextUniqueId() {\n        return this.nextUniqueId++;\n    }\n\n    add(changeTree: ChangeTree) {\n        // Assign unique `refId` to changeTree if it doesn't have one yet.\n        if (changeTree.refId === undefined) {\n            changeTree.refId = this.getNextUniqueId();\n        }\n\n        const isNewChangeTree = (this.changeTrees[changeTree.refId] === undefined);\n        if (isNewChangeTree) { this.changeTrees[changeTree.refId] = changeTree; }\n\n        const previousRefCount = this.refCount[changeTree.refId];\n        if (previousRefCount === 0) {\n            //\n            // When a ChangeTree is re-added, it means that it was previously removed.\n            // We need to re-add all changes to the `changes` map.\n            //\n            const ops = changeTree.allChanges.operations;\n            let len = ops.length;\n            while (len--) {\n                changeTree.indexedOperations[ops[len]] = OPERATION.ADD;\n                setOperationAtIndex(changeTree.changes, len);\n            }\n        }\n\n        this.refCount[changeTree.refId] = (previousRefCount || 0) + 1;\n\n        // console.log(\"ADD\", { refId: changeTree.refId, ref: changeTree.ref.constructor.name, refCount: this.refCount[changeTree.refId], isNewChangeTree });\n\n        return isNewChangeTree;\n    }\n\n    remove(changeTree: ChangeTree) {\n        const refCount = (this.refCount[changeTree.refId]) - 1;\n\n        // console.log(\"REMOVE\", { refId: changeTree.refId, ref: changeTree.ref.constructor.name, refCount, needRemove: refCount <= 0 });\n\n        if (refCount <= 0) {\n            //\n            // Only remove \"root\" reference if it's the last reference\n            //\n            changeTree.root = undefined;\n            delete this.changeTrees[changeTree.refId];\n\n            this.removeChangeFromChangeSet(\"allChanges\", changeTree);\n            this.removeChangeFromChangeSet(\"changes\", changeTree);\n\n            if (changeTree.filteredChanges) {\n                this.removeChangeFromChangeSet(\"allFilteredChanges\", changeTree);\n                this.removeChangeFromChangeSet(\"filteredChanges\", changeTree);\n            }\n\n            this.refCount[changeTree.refId] = 0;\n\n            changeTree.forEachChild((child, _) => {\n                if (child.removeParent(changeTree.ref)) {\n                    if ((\n                        child.parentChain === undefined || // no parent, remove it\n                        (child.parentChain && this.refCount[child.refId] > 0) // parent is still in use, but has more than one reference, remove it\n                    )) {\n                        this.remove(child);\n\n                    } else if (child.parentChain) {\n                        // re-assigning a child of the same root, move it next to parent\n                        this.moveNextToParent(child);\n                    }\n                }\n            });\n\n        } else {\n            this.refCount[changeTree.refId] = refCount;\n\n            //\n            // When losing a reference to an instance, it is best to move the\n            // ChangeTree next to its parent in the encoding queue.\n            //\n            // This way, at decoding time, the instance that contains the\n            // ChangeTree will be available before the ChangeTree itself. If the\n            // containing instance is not available, the Decoder will throw\n            // \"refId not found\" error.\n            //\n            this.recursivelyMoveNextToParent(changeTree);\n        }\n\n        return refCount;\n    }\n\n    recursivelyMoveNextToParent(changeTree: ChangeTree) {\n        this.moveNextToParent(changeTree);\n        changeTree.forEachChild((child, _) => this.recursivelyMoveNextToParent(child));\n    }\n\n    moveNextToParent(changeTree: ChangeTree) {\n        if (changeTree.filteredChanges) {\n            this.moveNextToParentInChangeTreeList(\"filteredChanges\", changeTree);\n            this.moveNextToParentInChangeTreeList(\"allFilteredChanges\", changeTree);\n        } else {\n            this.moveNextToParentInChangeTreeList(\"changes\", changeTree);\n            this.moveNextToParentInChangeTreeList(\"allChanges\", changeTree);\n        }\n    }\n\n    moveNextToParentInChangeTreeList(changeSetName: ChangeSetName, changeTree: ChangeTree): void {\n        const changeSet = this[changeSetName];\n        const node = changeTree[changeSetName].queueRootNode;\n        if (!node) return;\n\n        // Find the parent in the linked list\n        const parent = changeTree.parent;\n        if (!parent || !parent[$changes]) return;\n\n        const parentNode = parent[$changes][changeSetName]?.queueRootNode;\n        if (!parentNode || parentNode === node) return;\n\n        // Use cached positions - no iteration needed!\n        const parentPosition = parentNode.position;\n        const childPosition = node.position;\n\n        // If child is already after parent, no need to move\n        if (childPosition > parentPosition) return;\n\n        // Child is before parent, so we need to move it after parent\n        // This maintains decoding order (parent before child)\n\n        // Remove node from current position\n        if (node.prev) {\n            node.prev.next = node.next;\n        } else {\n            changeSet.next = node.next;\n        }\n\n        if (node.next) {\n            node.next.prev = node.prev;\n        } else {\n            changeSet.tail = node.prev;\n        }\n\n        // Insert node right after parent\n        node.prev = parentNode;\n        node.next = parentNode.next;\n\n        if (parentNode.next) {\n            parentNode.next.prev = node;\n        } else {\n            changeSet.tail = node;\n        }\n\n        parentNode.next = node;\n\n        // Update positions after the move\n        this.updatePositionsAfterMove(changeSet, node, parentPosition + 1);\n    }\n\n    public enqueueChangeTree(\n        changeTree: ChangeTree,\n        changeSet: 'changes' | 'filteredChanges' | 'allFilteredChanges' | 'allChanges',\n        queueRootNode = changeTree[changeSet].queueRootNode\n    ) {\n        // skip\n        if (queueRootNode) { return; }\n\n        // Add to linked list if not already present\n        changeTree[changeSet].queueRootNode = this.addToChangeTreeList(this[changeSet], changeTree);\n    }\n\n    protected addToChangeTreeList(list: ChangeTreeList, changeTree: ChangeTree): ChangeTreeNode {\n        const node: ChangeTreeNode = {\n            changeTree,\n            next: undefined,\n            prev: undefined,\n            position: list.tail ? list.tail.position + 1 : 0\n        };\n\n        if (!list.next) {\n            list.next = node;\n            list.tail = node;\n        } else {\n            node.prev = list.tail;\n            list.tail!.next = node;\n            list.tail = node;\n        }\n\n        return node;\n    }\n\n    protected updatePositionsAfterRemoval(list: ChangeTreeList, removedPosition: number) {\n        // Update positions for all nodes after the removed position\n        let current = list.next;\n        let position = 0;\n\n        while (current) {\n            if (position >= removedPosition) {\n                current.position = position;\n            }\n            current = current.next;\n            position++;\n        }\n    }\n\n    protected updatePositionsAfterMove(list: ChangeTreeList, node: ChangeTreeNode, newPosition: number) {\n        // Recalculate all positions - this is more reliable than trying to be clever\n        let current = list.next;\n        let position = 0;\n\n        while (current) {\n            current.position = position;\n            current = current.next;\n            position++;\n        }\n    }\n\n    public removeChangeFromChangeSet(changeSetName: ChangeSetName, changeTree: ChangeTree) {\n        const changeSet = this[changeSetName];\n        const node = changeTree[changeSetName].queueRootNode;\n\n        if (node && node.changeTree === changeTree) {\n            const removedPosition = node.position;\n\n            // Remove the node from the linked list\n            if (node.prev) {\n                node.prev.next = node.next;\n            } else {\n                changeSet.next = node.next;\n            }\n\n            if (node.next) {\n                node.next.prev = node.prev;\n            } else {\n                changeSet.tail = node.prev;\n            }\n\n            // Update positions for nodes that came after the removed node\n            this.updatePositionsAfterRemoval(changeSet, removedPosition);\n\n            // Clear ChangeTree reference\n            changeTree[changeSetName].queueRootNode = undefined;\n            return true;\n        }\n\n        return false;\n    }\n}\n"]}