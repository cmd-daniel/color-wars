var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// packages/tools/src/loadenv.ts
import fs from "fs";
import path from "path";
import dotenv from "dotenv";
function getEnvFromArgv() {
  const envIndex = process.argv.indexOf("--env");
  return envIndex !== -1 ? process.argv[envIndex + 1] : void 0;
}
function getNodeEnv() {
  return process.env.NODE_ENV || getEnvFromArgv() || "development";
}
function getRegion() {
  return (process.env.REGION || "unknown").toLowerCase();
}
function loadEnvFile(envFileOptions, log = "none") {
  const envPaths = [];
  envFileOptions.forEach((envFilename) => {
    if (envFilename.startsWith("/")) {
      envPaths.push(envFilename);
    } else {
      envPaths.push(path.resolve(path.dirname(__require?.main?.filename || process.cwd()), "..", envFilename));
      envPaths.push(path.resolve(process.cwd(), envFilename));
    }
  });
  const envPath = envPaths.find((envPath2) => fs.existsSync(envPath2));
  if (envPath) {
    dotenv.config({ path: envPath });
    if (log !== "none") {
      console.info(`\u2705 ${path.basename(envPath)} loaded.`);
    }
  } else if (log === "both") {
    console.info(`\u2139\uFE0F  optional .env file not found: ${envFileOptions.join(", ")}`);
  }
}
if (fs.existsSync("/etc/environment")) {
  dotenv.config({ path: "/etc/environment", override: true });
}
if (process.env.COLYSEUS_CLOUD !== void 0) {
  const cloudEnvFileNames = [".env.cloud"];
  if (process.env.APP_ROOT_PATH) {
    cloudEnvFileNames.unshift(`${process.env.APP_ROOT_PATH}${process.env.APP_ROOT_PATH.endsWith("/") ? "" : "/"}.env.cloud`);
  }
  loadEnvFile(cloudEnvFileNames);
}
loadEnvFile([`.env.${getNodeEnv()}`, `.env`], "both");
if (process.env.REGION !== void 0) {
  loadEnvFile([`.env.${getRegion()}.${getNodeEnv()}`], "success");
}
